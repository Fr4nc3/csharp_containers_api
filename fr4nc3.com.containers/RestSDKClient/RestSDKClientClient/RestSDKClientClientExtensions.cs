// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace RestSDKClient
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for RestSDKClientClient.
    /// </summary>
    public static partial class RestSDKClientClientExtensions
    {
            /// <summary>
            /// Allows upload a file to a public or private container
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='containername'>
            /// container name
            /// </param>
            /// <param name='fileName'>
            /// file name
            /// </param>
            /// <param name='fileData'>
            /// </param>
            public static IList<ErrorResponse> UploadFile(this IRestSDKClientClient operations, string containername, string fileName, System.IO.Stream fileData = default(System.IO.Stream))
            {
                return Task.Factory.StartNew(s => ((IRestSDKClientClient)s).UploadFileAsync(containername, fileName, fileData), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Allows upload a file to a public or private container
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='containername'>
            /// container name
            /// </param>
            /// <param name='fileName'>
            /// file name
            /// </param>
            /// <param name='fileData'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ErrorResponse>> UploadFileAsync(this IRestSDKClientClient operations, string containername, string fileName, System.IO.Stream fileData = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadFileWithHttpMessagesAsync(containername, fileName, fileData, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update existing file
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='containername'>
            /// container name
            /// </param>
            /// <param name='fileName'>
            /// file name
            /// </param>
            /// <param name='fileData'>
            /// </param>
            public static object PatchFile(this IRestSDKClientClient operations, string containername, string fileName, System.IO.Stream fileData = default(System.IO.Stream))
            {
                return Task.Factory.StartNew(s => ((IRestSDKClientClient)s).PatchFileAsync(containername, fileName, fileData), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update existing file
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='containername'>
            /// container name
            /// </param>
            /// <param name='fileName'>
            /// file name
            /// </param>
            /// <param name='fileData'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PatchFileAsync(this IRestSDKClientClient operations, string containername, string fileName, System.IO.Stream fileData = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchFileWithHttpMessagesAsync(containername, fileName, fileData, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete existing file
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='containername'>
            /// container name
            /// </param>
            /// <param name='fileName'>
            /// file name
            /// </param>
            public static object DeleteFile(this IRestSDKClientClient operations, string containername, string fileName)
            {
                return Task.Factory.StartNew(s => ((IRestSDKClientClient)s).DeleteFileAsync(containername, fileName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete existing file
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='containername'>
            /// container name
            /// </param>
            /// <param name='fileName'>
            /// file name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteFileAsync(this IRestSDKClientClient operations, string containername, string fileName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteFileWithHttpMessagesAsync(containername, fileName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get a file if exists
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='containername'>
            /// container name
            /// </param>
            /// <param name='fileName'>
            /// file name
            /// </param>
            public static object GetFile(this IRestSDKClientClient operations, string containername, string fileName)
            {
                return Task.Factory.StartNew(s => ((IRestSDKClientClient)s).GetFileAsync(containername, fileName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get a file if exists
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='containername'>
            /// container name
            /// </param>
            /// <param name='fileName'>
            /// file name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetFileAsync(this IRestSDKClientClient operations, string containername, string fileName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFileWithHttpMessagesAsync(containername, fileName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get all the files from a container
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='containername'>
            /// container name
            /// </param>
            public static object GetFiles(this IRestSDKClientClient operations, string containername)
            {
                return Task.Factory.StartNew(s => ((IRestSDKClientClient)s).GetFilesAsync(containername), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get all the files from a container
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='containername'>
            /// container name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetFilesAsync(this IRestSDKClientClient operations, string containername, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFilesWithHttpMessagesAsync(containername, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
